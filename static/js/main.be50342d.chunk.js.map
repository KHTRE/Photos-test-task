{"version":3,"sources":["api/photos.ts","components/ListOfPhotos/ListOfPhotos.tsx","components/Header/Header.tsx","components/Pagination/Pagination.tsx","components/Modal/Modal.tsx","components/Loader/Loader.tsx","components/Error/Error.tsx","App.tsx","index.tsx"],"names":["API_URL","getPhotosFromServer","a","fetch","response","json","deletePhotoFromServer","photoId","url","method","console","log","ListOfPhotos","props","photos","setPhotos","selectedAlbum","setPagesCount","selectedPage","setSelectedPhotoId","handlePhotoSelect","event","currentTarget","name","handlePhotoDelete","updatedPhotos","filter","photo","id","className","filteredPhotos","albumId","pagesCount","Math","ceil","length","getFilteredPhotos","_photo","index","map","type","onClick","String","src","thumbnailUrl","alt","title","Header","albums","setSelectedAlbum","setSelectedPage","htmlFor","value","onChange","target","album","Pagination","setPage","list","i","push","getPagesList","page","classNames","active","Modal","selectedPhotoId","correctPhoto","find","Loader","role","Error","App","useState","error","setError","loading","setLoading","setAlbums","getPhotos","photosFromServer","listOfAlbums","finalListOfAlbums","Array","from","Set","useEffect","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.be50342d.chunk.js","sourcesContent":["const API_URL = 'https://jsonplaceholder.typicode.com/photos';\n\nexport const getPhotosFromServer = async () => {\n  const response = await fetch(API_URL);\n\n  return response.json();\n};\n\nexport const deletePhotoFromServer = async (photoId: number) => {\n  const url = `${API_URL}/${photoId}`;\n  const response = await fetch(url, {\n    method: 'DELETE',\n  });\n\n  // eslint-disable-next-line no-console\n  console.log(response);\n};\n","import React from 'react';\nimport { deletePhotoFromServer } from '../../api/photos';\n\ntype SetPhotos = (photos: Photo[]) => void;\ntype SetPagesCount = (count: number) => void;\ntype SetSelectedPhotoId = (photo: number) => void;\n\ntype Props = {\n  photos: Photo[];\n  setPhotos: SetPhotos;\n  selectedAlbum: number;\n  setPagesCount: SetPagesCount;\n  selectedPage: number;\n  setSelectedPhotoId: SetSelectedPhotoId;\n};\n\nexport const ListOfPhotos: React.FC<Props> = (props) => {\n  const {\n    photos,\n    setPhotos,\n    selectedAlbum,\n    setPagesCount,\n    selectedPage,\n    setSelectedPhotoId,\n  } = props;\n\n  const getFilteredPhotos = () => {\n    let filteredPhotos = photos;\n\n    if (selectedAlbum !== 0) {\n      filteredPhotos = photos.filter(photo => photo.albumId === selectedAlbum);\n    }\n\n    const pagesCount = Math.ceil(filteredPhotos.length / 10);\n\n    setPagesCount(pagesCount);\n\n    return filteredPhotos;\n  };\n\n  const getPhotosToShow = () => {\n    return getFilteredPhotos().filter((_photo, index) => (\n      index >= selectedPage * 10 - 10 && index < selectedPage * 10\n    ));\n  };\n\n  const handlePhotoSelect = (event: React.MouseEvent<HTMLButtonElement>) => {\n    setSelectedPhotoId(+event.currentTarget.name);\n  };\n\n  const handlePhotoDelete = (event: React.MouseEvent<HTMLButtonElement>) => {\n    deletePhotoFromServer(+event.currentTarget.name);\n\n    const updatedPhotos = photos.filter(photo => photo.id !== +event.currentTarget.name);\n\n    setPhotos(updatedPhotos);\n  };\n\n  return (\n    <div className=\"px-4 pb-4 row row-cols-1 row-cols-md-5 row-cols-sm-3 g-4\">\n      {getPhotosToShow().map(photo => (\n        <div className=\"col\">\n          <div className=\"card h-100\">\n            <button\n              type=\"button\"\n              onClick={handlePhotoSelect}\n              name={String(photo.id)}\n              className=\"btn btn-outline-secondary\"\n            >\n              <img\n                src={photo.thumbnailUrl}\n                className=\"card-img-top\"\n                alt={photo.title}\n              />\n            </button>\n            <div className=\"card-body\">\n              <span>\n                {'Album: '}\n                {photo.albumId}\n              </span>\n              <h5 className=\"card-title text-truncate\" title={photo.title}>\n                {'Title: '}\n                {photo.title}\n              </h5>\n            </div>\n            <button type=\"button\" className=\"button is-danger\" onClick={handlePhotoDelete} name={String(photo.id)}>Delete</button>\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n};\n","import React from 'react';\n\ntype SetSelectedAlbum = (selectedAlbum:number) => void;\ntype SetSelectedPage = (selectedPage:number) => void;\n\ntype Props = {\n  albums: number[];\n  selectedAlbum: number;\n  setSelectedAlbum: SetSelectedAlbum;\n  setSelectedPage: SetSelectedPage;\n};\n\nexport const Header: React.FC<Props> = (props) => {\n  const {\n    albums,\n    selectedAlbum,\n    setSelectedAlbum,\n    setSelectedPage,\n  } = props;\n\n  const handleAlbumSelect = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    if (+event.target.value !== selectedAlbum) {\n      setSelectedAlbum(+event.target.value);\n      setSelectedPage(1);\n    }\n  };\n\n  return (\n    <header className=\"d-flex justify-content-center py-4\">\n      <label htmlFor=\"select\">\n        Select desired album: &nbsp;\n        <select\n          id=\"select\"\n          value={selectedAlbum}\n          onChange={handleAlbumSelect}\n        >\n          <option value=\"0\">All albums</option>\n          {albums.map(album => (\n            <option key={album} value={album}>{album}</option>\n          ))}\n        </select>\n      </label>\n    </header>\n  );\n};\n","import React from 'react';\nimport classNames from 'classnames';\n\ntype SetSelectedPage = (page: number) => void;\n\ntype Props = {\n  selectedPage: number;\n  setSelectedPage: SetSelectedPage;\n  pagesCount: number;\n};\n\nexport const Pagination: React.FC<Props> = (props) => {\n  const { pagesCount, selectedPage, setSelectedPage } = props;\n\n  const setPage = (event: React.MouseEvent<HTMLButtonElement>) => {\n    setSelectedPage(+event.currentTarget.name);\n  };\n\n  const getPagesList = () => {\n    const list = [];\n\n    if (pagesCount <= 5) {\n      for (let i = 1; i <= pagesCount; i += 1) {\n        list.push(i);\n      }\n    } else if (selectedPage <= 3) {\n      for (let i = 1; i <= 5; i += 1) {\n        list.push(i);\n      }\n    } else if (selectedPage > 3 && pagesCount - selectedPage >= 2) {\n      for (let i = selectedPage - 2; i <= selectedPage + 2; i += 1) {\n        list.push(i);\n      }\n    } else {\n      for (let i = pagesCount - 4; i <= pagesCount; i += 1) {\n        list.push(i);\n      }\n    }\n\n    return list;\n  };\n\n  return (\n    <nav>\n      <ul className=\"pagination justify-content-center pb-2\">\n        <button\n          type=\"button\"\n          className=\"btn btn-warning mx-4\"\n          onClick={() => {\n            setSelectedPage(1);\n          }}\n        >\n          First page\n        </button>\n        {getPagesList().map(page => (\n          <li className={classNames('page-item', { active: selectedPage === page })} key={page}>\n            <button\n              type=\"button\"\n              className=\"page-link\"\n              name={String(page)}\n              onClick={setPage}\n            >\n              {page}\n            </button>\n          </li>\n        ))}\n        <button\n          type=\"button\"\n          className=\"btn btn-warning mx-4\"\n          onClick={() => {\n            setSelectedPage(pagesCount);\n          }}\n        >\n          Last page\n          {` (${pagesCount})`}\n        </button>\n      </ul>\n    </nav>\n  );\n};\n","import React from 'react';\nimport classNames from 'classnames';\n\ntype SetSelectedPhotoId = (photo: number) => void;\n\ntype Props = {\n  selectedPhotoId: number;\n  photos: Photo[];\n  setSelectedPhotoId: SetSelectedPhotoId;\n};\n\nexport const Modal: React.FC<Props> = (props) => {\n  const { selectedPhotoId, photos, setSelectedPhotoId } = props;\n  const correctPhoto = photos.find(photo => photo.id === selectedPhotoId);\n\n  return (\n    <div className={classNames('modal', { 'is-active': selectedPhotoId })}>\n      <div className=\"modal-background\" />\n      <div className=\"modal-dialog\">\n        <div className=\"modal-content\">\n          <div className=\"modal-header\">\n            <h5 className=\"modal-title\">{correctPhoto && correctPhoto.title}</h5>\n            <button\n              type=\"button\"\n              className=\"btn-close\"\n              data-bs-dismiss=\"modal\"\n              aria-label=\"Close\"\n              onClick={() => {\n                setSelectedPhotoId(0);\n              }}\n            />\n          </div>\n          <div className=\"modal-body\">\n            {correctPhoto && <img src={correctPhoto.url} alt={correctPhoto.title} />}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\n\nexport const Loader: React.FC = () => (\n  <div className=\"modal-background bg-light\">\n    <div className=\"position-absolute top-50 start-50\">\n\n      <div className=\"spinner-border\" role=\"status\">\n        <span className=\"visually-hidden\">Loading...</span>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nexport const Error: React.FC = () => (\n  <div className=\"modal-background bg-light\">\n    <span>An error ocurred while loading data from server</span>\n  </div>\n);\n","import React, { useEffect, useState } from 'react';\nimport classNames from 'classnames';\nimport { ListOfPhotos } from './components/ListOfPhotos';\nimport { Header } from './components/Header';\nimport { Pagination } from './components/Pagination';\nimport { Modal } from './components/Modal';\nimport { Loader } from './components/Loader';\nimport { Error } from './components/Error';\nimport { getPhotosFromServer } from './api/photos';\n\nexport const App: React.FC = () => {\n  const [photos, setPhotos] = useState<Photo[]>([]);\n  const [error, setError] = useState<boolean>(false);\n  const [loading, setLoading] = useState(false);\n  const [albums, setAlbums] = useState<number[]>([]);\n  const [selectedAlbum, setSelectedAlbum] = useState<number>(0);\n  const [selectedPage, setSelectedPage] = useState<number>(1);\n  const [pagesCount, setPagesCount] = useState<number>(1);\n  const [selectedPhotoId, setSelectedPhotoId] = useState<number>(0);\n\n  const getPhotos = async () => {\n    setLoading(true);\n    let photosFromServer: Photo[] = [];\n\n    try {\n      photosFromServer = await getPhotosFromServer();\n    } catch {\n      setError(true);\n    }\n\n    const listOfAlbums = photosFromServer.map(photo => photo.albumId);\n    const finalListOfAlbums = Array.from(new Set(listOfAlbums));\n\n    setPhotos(photosFromServer);\n    setAlbums(finalListOfAlbums);\n    setLoading(false);\n  };\n\n  useEffect(() => {\n    getPhotos();\n  }, []);\n\n  return (\n    <div>\n      <Modal\n        selectedPhotoId={selectedPhotoId}\n        photos={photos}\n        setSelectedPhotoId={setSelectedPhotoId}\n      />\n      <div\n        className={\n          classNames(\n            'sticky-top bg-light border-bottom mb-2',\n            { 'visually-hidden': selectedPhotoId },\n          )\n        }\n      >\n        <Header\n          albums={albums}\n          selectedAlbum={selectedAlbum}\n          setSelectedAlbum={setSelectedAlbum}\n          setSelectedPage={setSelectedPage}\n        />\n        <Pagination\n          selectedPage={selectedPage}\n          setSelectedPage={setSelectedPage}\n          pagesCount={pagesCount}\n        />\n      </div>\n      <ListOfPhotos\n        photos={photos}\n        setPhotos={setPhotos}\n        selectedAlbum={selectedAlbum}\n        setPagesCount={setPagesCount}\n        selectedPage={selectedPage}\n        setSelectedPhotoId={setSelectedPhotoId}\n      />\n      {loading && <Loader />}\n      {error && <Error />}\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}