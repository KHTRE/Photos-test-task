{"version":3,"sources":["api/photos.ts","components/ListOfPhotos/ListOfPhotos.tsx","components/Header/Header.tsx","components/Pagination/Pagination.tsx","components/Modal/Modal.tsx","components/Loader/Loader.tsx","components/Error/Error.tsx","App.tsx","index.tsx"],"names":["API_URL","getPhotosFromServer","a","fetch","response","json","deletePhotoFromServer","photoId","url","method","console","log","ListOfPhotos","props","photos","filteredPhotos","setPhotos","setFilteredPhotos","selectedPage","setSelectedPhotoId","itemsPerPage","handlePhotoSelect","event","currentTarget","name","handlePhotoDelete","newPhotos","filter","photo","id","newFilterPhotos","className","length","_photo","index","map","type","onClick","String","src","thumbnailUrl","alt","title","albumId","Header","albums","selectedAlbum","setSelectedAlbum","setSelectedPage","htmlFor","value","onChange","target","album","Pagination","pagesCount","setItemsPerPage","setPage","list","i","push","getPagesList","page","classNames","active","Modal","selectedPhotoId","correctPhoto","find","Loader","role","Error","App","useState","error","setError","loading","setLoading","setAlbums","setPagesCount","getPhotos","photosFromServer","listOfAlbums","finalListOfAlbums","Array","from","Set","Math","ceil","getPagesCount","preparedPhotos","numberOfPages","useEffect","photosByAlbum","getFilteredPhotos","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d803937a.chunk.js","sourcesContent":["const API_URL = 'https://jsonplaceholder.typicode.com/photos';\n\nexport const getPhotosFromServer = async () => {\n  const response = await fetch(API_URL);\n\n  return response.json();\n};\n\nexport const deletePhotoFromServer = async (photoId: number) => {\n  const url = `${API_URL}/${photoId}`;\n  const response = await fetch(url, {\n    method: 'DELETE',\n  });\n\n  // eslint-disable-next-line no-console\n  console.log(response);\n};\n","import React from 'react';\nimport { deletePhotoFromServer } from '../../api/photos';\n\ntype SetPhotos = (photos: Photo[]) => void;\ntype SetSelectedPhotoId = (photo: number) => void;\ntype SetFilteredPhotos = (photo: Photo[]) => void;\n\ntype Props = {\n  photos: Photo[];\n  filteredPhotos: Photo[];\n  setFilteredPhotos: SetFilteredPhotos;\n  setPhotos: SetPhotos;\n  selectedPage: number;\n  itemsPerPage: number;\n  setSelectedPhotoId: SetSelectedPhotoId;\n};\n\nexport const ListOfPhotos: React.FC<Props> = (props) => {\n  const {\n    photos,\n    filteredPhotos,\n    setPhotos,\n    setFilteredPhotos,\n    selectedPage,\n    setSelectedPhotoId,\n    itemsPerPage,\n  } = props;\n\n  const getPhotosToShow = () => {\n    if (filteredPhotos.length > 0) {\n      return filteredPhotos.filter((_photo, index) => (\n        index >= selectedPage * itemsPerPage - itemsPerPage && index < selectedPage * itemsPerPage\n      ));\n    }\n\n    return photos.filter((_photo, index) => (\n      index >= selectedPage * itemsPerPage - itemsPerPage && index < selectedPage * itemsPerPage\n    ));\n  };\n\n  const handlePhotoSelect = (event: React.MouseEvent<HTMLButtonElement>) => {\n    setSelectedPhotoId(+event.currentTarget.name);\n  };\n\n  const handlePhotoDelete = (event: React.MouseEvent<HTMLButtonElement>) => {\n    deletePhotoFromServer(+event.currentTarget.name);\n\n    const newPhotos = photos.filter(photo => photo.id !== +event.currentTarget.name);\n\n    const newFilterPhotos = filteredPhotos.filter(photo => photo.id !== +event.currentTarget.name);\n\n    setPhotos(newPhotos);\n    setFilteredPhotos(newFilterPhotos);\n  };\n\n  return (\n    <div className=\"px-4 pb-4 row row-cols-1 row-cols-md-5 row-cols-sm-3 g-4\">\n      {getPhotosToShow().map(photo => (\n        <div className=\"col\">\n          <div className=\"card h-100\">\n            <button\n              type=\"button\"\n              onClick={handlePhotoSelect}\n              name={String(photo.id)}\n              className=\"btn btn-outline-secondary\"\n            >\n              <img\n                src={photo.thumbnailUrl}\n                className=\"card-img-top\"\n                alt={photo.title}\n              />\n            </button>\n            <div className=\"card-body\">\n              <span>\n                <b>Album: </b>\n                {photo.albumId}\n              </span>\n              <h5 className=\"card-title text-truncate\" title={photo.title}>\n                <b>Title: </b>\n                {photo.title}\n              </h5>\n            </div>\n            <button type=\"button\" className=\"button is-danger\" onClick={handlePhotoDelete} name={String(photo.id)}>Delete</button>\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n};\n","import React from 'react';\n\ntype SetSelectedAlbum = (selectedAlbum:number) => void;\ntype SetSelectedPage = (selectedPage:number) => void;\n\ntype Props = {\n  albums: number[];\n  selectedAlbum: number;\n  setSelectedAlbum: SetSelectedAlbum;\n  setSelectedPage: SetSelectedPage;\n};\n\nexport const Header: React.FC<Props> = (props) => {\n  const {\n    albums,\n    selectedAlbum,\n    setSelectedAlbum,\n    setSelectedPage,\n  } = props;\n\n  const handleAlbumSelect = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    if (+event.target.value !== selectedAlbum) {\n      setSelectedAlbum(+event.target.value);\n      setSelectedPage(1);\n    }\n  };\n\n  return (\n    <header className=\"d-flex justify-content-center py-4\">\n      <label htmlFor=\"select\">\n        Select desired album: &nbsp;\n        <select\n          id=\"select\"\n          value={selectedAlbum}\n          onChange={handleAlbumSelect}\n        >\n          <option value=\"0\">All albums</option>\n          {albums.map(album => (\n            <option key={album} value={album}>{album}</option>\n          ))}\n        </select>\n      </label>\n    </header>\n  );\n};\n","import React from 'react';\nimport classNames from 'classnames';\n\ntype SetSelectedPage = (page: number) => void;\ntype SetItemsPerPage = (items: number) => void;\n\ntype Props = {\n  selectedPage: number;\n  setSelectedPage: SetSelectedPage;\n  pagesCount: number;\n  itemsPerPage: number;\n  setItemsPerPage: SetItemsPerPage;\n};\n\nexport const Pagination: React.FC<Props> = (props) => {\n  const {\n    pagesCount,\n    selectedPage,\n    setSelectedPage,\n    itemsPerPage,\n    setItemsPerPage,\n  } = props;\n\n  const setPage = (event: React.MouseEvent<HTMLButtonElement>) => {\n    setSelectedPage(+event.currentTarget.name);\n  };\n\n  const handleItemsPerPage = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    if (+event.target.value !== itemsPerPage) {\n      setItemsPerPage(+event.target.value);\n      setSelectedPage(1);\n    }\n  };\n\n  const getPagesList = () => {\n    const list = [];\n\n    if (pagesCount <= 5) {\n      for (let i = 1; i <= pagesCount; i += 1) {\n        list.push(i);\n      }\n    } else if (selectedPage <= 3) {\n      for (let i = 1; i <= 5; i += 1) {\n        list.push(i);\n      }\n    } else if (selectedPage > 3 && pagesCount - selectedPage >= 2) {\n      for (let i = selectedPage - 2; i <= selectedPage + 2; i += 1) {\n        list.push(i);\n      }\n    } else {\n      for (let i = pagesCount - 4; i <= pagesCount; i += 1) {\n        list.push(i);\n      }\n    }\n\n    return list;\n  };\n\n  return (\n    <nav className=\"d-flex justify-content-center align-items-baseline\">\n      <label htmlFor=\"select\">\n        Per page: &nbsp;\n        <select\n          id=\"select\"\n          value={itemsPerPage}\n          onChange={handleItemsPerPage}\n        >\n          <option value=\"10\">10</option>\n          <option value=\"25\">25</option>\n          <option value=\"50\">50</option>\n        </select>\n      </label>\n      <ul className=\"pagination justify-content-center pb-2\">\n        <button\n          type=\"button\"\n          className=\"btn btn-warning mx-4\"\n          onClick={() => {\n            setSelectedPage(1);\n          }}\n        >\n          First page\n        </button>\n        {getPagesList().map(page => (\n          <li className={classNames('page-item', { active: selectedPage === page })} key={page}>\n            <button\n              type=\"button\"\n              className=\"page-link\"\n              name={String(page)}\n              onClick={setPage}\n            >\n              {page}\n            </button>\n          </li>\n        ))}\n        <button\n          type=\"button\"\n          className=\"btn btn-warning mx-4\"\n          onClick={() => {\n            setSelectedPage(pagesCount);\n          }}\n        >\n          Last page\n          {` (${pagesCount})`}\n        </button>\n      </ul>\n    </nav>\n  );\n};\n","import React from 'react';\nimport classNames from 'classnames';\n\ntype SetSelectedPhotoId = (photo: number) => void;\n\ntype Props = {\n  selectedPhotoId: number;\n  photos: Photo[];\n  setSelectedPhotoId: SetSelectedPhotoId;\n};\n\nexport const Modal: React.FC<Props> = (props) => {\n  const { selectedPhotoId, photos, setSelectedPhotoId } = props;\n  const correctPhoto = photos.find(photo => photo.id === selectedPhotoId);\n\n  return (\n    <div className={classNames('modal', { 'is-active': selectedPhotoId })}>\n      <div className=\"modal-background\" />\n      <div className=\"modal-dialog\">\n        <div className=\"modal-content\">\n          <div className=\"modal-header\">\n            <h5 className=\"modal-title\">{correctPhoto && correctPhoto.title}</h5>\n            <button\n              type=\"button\"\n              className=\"btn-close\"\n              data-bs-dismiss=\"modal\"\n              aria-label=\"Close\"\n              onClick={() => {\n                setSelectedPhotoId(0);\n              }}\n            />\n          </div>\n          <div className=\"modal-body\">\n            {correctPhoto && <img src={correctPhoto.url} alt={correctPhoto.title} />}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\n\nexport const Loader: React.FC = () => (\n  <div className=\"modal-background bg-light\">\n    <div className=\"position-absolute top-50 start-50\">\n\n      <div className=\"spinner-border\" role=\"status\">\n        <span className=\"visually-hidden\">Loading...</span>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nexport const Error: React.FC = () => (\n  <div className=\"modal-background bg-light\">\n    <span>An error ocurred while loading data from server</span>\n  </div>\n);\n","import React, { useEffect, useState } from 'react';\nimport classNames from 'classnames';\nimport { ListOfPhotos } from './components/ListOfPhotos';\nimport { Header } from './components/Header';\nimport { Pagination } from './components/Pagination';\nimport { Modal } from './components/Modal';\nimport { Loader } from './components/Loader';\nimport { Error } from './components/Error';\nimport { getPhotosFromServer } from './api/photos';\n\nexport const App: React.FC = () => {\n  const [photos, setPhotos] = useState<Photo[]>([]);\n  const [filteredPhotos, setFilteredPhotos] = useState<Photo[]>([]);\n  const [error, setError] = useState<boolean>(false);\n  const [loading, setLoading] = useState(false);\n  const [albums, setAlbums] = useState<number[]>([]);\n  const [selectedAlbum, setSelectedAlbum] = useState<number>(0);\n  const [selectedPage, setSelectedPage] = useState<number>(1);\n  const [pagesCount, setPagesCount] = useState<number>(1);\n  const [itemsPerPage, setItemsPerPage] = useState<number>(10);\n  const [selectedPhotoId, setSelectedPhotoId] = useState<number>(0);\n\n  const getPhotos = async () => {\n    setLoading(true);\n    let photosFromServer: Photo[] = [];\n\n    try {\n      photosFromServer = await getPhotosFromServer();\n    } catch {\n      setError(true);\n    }\n\n    const listOfAlbums = photosFromServer.map(photo => photo.albumId);\n    const finalListOfAlbums = Array.from(new Set(listOfAlbums));\n\n    setPagesCount(Math.ceil(photosFromServer.length / itemsPerPage));\n    setPhotos(photosFromServer);\n    setAlbums(finalListOfAlbums);\n    setLoading(false);\n  };\n\n  const getPagesCount = (preparedPhotos: Photo[]) => {\n    const numberOfPages = Math.ceil(preparedPhotos.length / itemsPerPage);\n\n    setPagesCount(numberOfPages);\n  };\n\n  const getFilteredPhotos = () => {\n    let photosByAlbum = photos;\n\n    if (selectedAlbum !== 0) {\n      photosByAlbum = photos.filter(photo => photo.albumId === selectedAlbum);\n    }\n\n    getPagesCount(photosByAlbum);\n    setFilteredPhotos(photosByAlbum);\n  };\n\n  useEffect(() => {\n    getPhotos();\n  }, []);\n\n  useEffect(() => {\n    getFilteredPhotos();\n  }, [selectedAlbum]);\n\n  useEffect(() => {\n    getPagesCount(filteredPhotos);\n  }, [itemsPerPage, filteredPhotos]);\n\n  return (\n    <div>\n      <Modal\n        selectedPhotoId={selectedPhotoId}\n        photos={photos}\n        setSelectedPhotoId={setSelectedPhotoId}\n      />\n      <div\n        className={\n          classNames(\n            'sticky-top bg-light border-bottom mb-2',\n            { 'visually-hidden': selectedPhotoId },\n          )\n        }\n      >\n        <Header\n          albums={albums}\n          selectedAlbum={selectedAlbum}\n          setSelectedAlbum={setSelectedAlbum}\n          setSelectedPage={setSelectedPage}\n        />\n        <Pagination\n          itemsPerPage={itemsPerPage}\n          setItemsPerPage={setItemsPerPage}\n          selectedPage={selectedPage}\n          setSelectedPage={setSelectedPage}\n          pagesCount={pagesCount}\n        />\n      </div>\n      <ListOfPhotos\n        photos={photos}\n        filteredPhotos={filteredPhotos}\n        setFilteredPhotos={setFilteredPhotos}\n        setPhotos={setPhotos}\n        selectedPage={selectedPage}\n        setSelectedPhotoId={setSelectedPhotoId}\n        itemsPerPage={itemsPerPage}\n      />\n      {loading && <Loader />}\n      {error && <Error />}\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}